import { Layout } from '@/layout/Layout';

const JsCloudStoragePage = () => {
  return (
    <Layout>
      <>
        <h1 id="-">Проект &quot;Облачное хранилище файлов&quot;</h1>
        <p>
          Многопользовательское файловое облако, где пользователи могут загружать, хранить и
          управлять своими файлами и папками. Вдохновлено Google Drive. Приложение построено с
          использованием ExpressJS, PostgreSQL, Redis и MinIO (S3).
        </p>
        <h2 id="-">Мотивация проекта</h2>
        <ul>
          <li>Практика использования ExpressJS и Prisma для создания микросервисного приложения.</li>
          <li>Опыт работы с контейнеризацией через Docker и Docker Compose.</li>
          <li>Реализация работы с S3 для хранения файлов и Redis для управления сессиями.</li>
          <li>Создание реляционной базы данных PostgreSQL.</li>
        </ul>
        <h2 id="-">Функционал приложения</h2>
        <h3 id="-">Работа с пользователями</h3>
        <ul>
          <li>
            <strong>Регистрация</strong> — создание новой учётной записи пользователя.
          </li>
          <li>
            <strong>Авторизация</strong> — вход пользователя в систему.
          </li>
          <li>
            <strong>Logout</strong> — завершение сессии пользователя и удаление токена.
          </li>
        </ul>
        <h3 id="-">Работа с файлами и папками</h3>
        <ul>
          <li>
            <strong>Загрузка файлов и папок</strong> — добавление файлов в облако.
          </li>
          <li>
            <strong>Создание новой пустой папки</strong> — аналог функции &quot;Создать папку&quot;
            в проводнике.
          </li>
          <li>
            <strong>Удаление</strong> — удаление файлов и папок.
          </li>
          <li>
            <strong>Переименование</strong> — изменение названия файлов и папок.
          </li>
        </ul>
        <h2 id="-">Интерфейс приложения</h2>
        <h3 id="-">Главная страница</h3>
        <ul>
          <li>
            <strong>Адрес:</strong> <code>/?path=$path_to_subdirectory</code>. Параметр{' '}
            <code>$path</code> указывает на текущую папку. Если не указан, отображается корневая
            директория.
          </li>
          <li>
            <strong>Пример URL:</strong> <code>/path=Projects%2FGo%2FCloudStorage</code>.
          </li>
        </ul>
        <h4 id="-">Заголовок</h4>
        <ul>
          <li>
            Для неавторизованных пользователей: отображаются кнопки регистрации и авторизации.
          </li>
          <li>
            Для авторизованных пользователей: отображаются логин пользователя и кнопка Logout.
          </li>
        </ul>
        <h4 id="-">Контент (доступен только для авторизованных пользователей)</h4>
        <ul>
          <li>
            <strong>Форма поиска</strong> — поиск файлов и папок по названию.
          </li>
          <li>
            <strong>Навигационная цепочка (breadcrumbs)</strong> — отображает путь до текущей папки.
          </li>
          <li>
            <strong>Список файлов и папок</strong> — имя каждого файла, кнопки для действий
            (удаление, переименование).
          </li>
          <li>
            <strong>Форма загрузки файлов</strong> — поле для загрузки файлов и папок (HTML{' '}
            <code>file input</code>).
          </li>
        </ul>
        <h3 id="-">Страница поиска файлов</h3>
        <ul>
          <li>
            <strong>Адрес:</strong> <code>/search/?query=$search_query</code>.
          </li>
        </ul>
        <h4 id="-">Заголовок</h4>
        <ul>
          <li>Аналогичен заголовку главной страницы.</li>
        </ul>
        <h4 id="-">Контент</h4>
        <ul>
          <li>
            <strong>Форма поиска</strong> — поиск файлов и папок.
          </li>
          <li>
            <strong>Список найденных файлов</strong> — для каждого файла отображается имя и кнопка
            перехода к папке.
          </li>
          <li>
            <strong>Редирект</strong> — неавторизованные пользователи перенаправляются на страницу
            авторизации.
          </li>
        </ul>
        <h3 id="-">Контроллер доступа к файлам</h3>
        <ul>
          <li>Отвечает за передачу запрошенных файлов пользователям.</li>
        </ul>
        <h2 id="-">Работа с сессиями, авторизацией, регистрацией</h2>
        <ul>
          <li>
            Использование <strong>Redis</strong> для хранения сессий пользователей.
          </li>
          <li>
            Регистрация пользователей с проверкой уникальности логина и сохранением сессий в Redis.
          </li>
        </ul>
        <h2 id="sql-">SQL база данных</h2>
        <ul>
          <li>
            <strong>PostgreSQL</strong> используется для хранения информации о пользователях и
            файловой структуре.
          </li>
          <li>
            Логин пользователя должен быть уникальным, а таблица пользователей должна содержать
            необходимые индексы.
          </li>
        </ul>
        <h3 id="-">Пример структуры базы данных</h3>
        <ul>
          <li>
            <strong>Таблица users</strong>: хранит данные о пользователях (id, логин, пароль).
          </li>
          <li>
            <strong>Таблица files</strong>: хранит информацию о файлах и папках (id, имя
            файла/папки, путь, принадлежность к пользователю).
          </li>
        </ul>
        <h2 id="-s3">Хранилище файлов S3</h2>
        <ul>
          <li>
            Для хранения файлов используется S3-совместимое хранилище <strong>MinIO</strong>.
          </li>
          <li>Локально MinIO развернуто через Docker.</li>
          <li>
            Докер-образ MinIO: <a href="https://hub.docker.com/r/minio/minio/">Docker MinIO</a>.
          </li>
        </ul>
        <h3 id="-s3-">Структура S3-хранилища</h3>
        <ul>
          <li>
            В корне бакета для каждого пользователя создаётся папка в формате{' '}
            <code>user-&#123;id&#125;-files</code>, где <code>&#123;id&#125;</code> — идентификатор
            пользователя из базы данных.
          </li>
        </ul>
        <h3 id="-s3-go">Работа с S3 через ExpressJS</h3>
        <ul>
          <li>
            Использовать <strong>
              MinIO
            </strong> для работы с объектным хранилищем:
            <ul>
              <li>
                <a href="https://min.io/docs/minio/linux/developers/javascript/minio-javascript.html">MinIO</a>.
              </li>
            </ul>
          </li>
        </ul>
        <h2 id="-">Загрузка файлов</h2>
        <ul>
          <li>
            Файлы загружаются через HTML <code>file input</code> формы.
          </li>
          <li>
            Передача файлов на сервер осуществляется через <code>multipart/form-data</code>.
          </li>
        </ul>
        <h2 id="-">Тестирование</h2>
        <h3 id="-">Интеграционные тесты для сервиса пользователей</h3>
        <p>Примеры тестов:</p>
        <ul>
          <li>
            Создание нового пользователя добавляет запись в таблицу <code>users</code>.
          </li>
          <li>
            Попытка создать пользователя с неуникальным логином вызывает соответствующую ошибку.
          </li>
        </ul>
        <h3 id="-">Интеграционные тесты для сервиса файлов</h3>
        <p>Примеры тестов:</p>
        <ul>
          <li>Загрузка файла добавляет его в бакет MinIO в корневую папку пользователя.</li>
          <li>Переименование или удаление файлов и папок выполняется корректно.</li>
          <li>
            Проверка прав доступа — пользователь не должен иметь доступ к файлам других
            пользователей.
          </li>
          <li>Поиск — пользователь может находить только свои файлы.</li>
        </ul>
        <h2 id="docker">Docker</h2>
        <ul>
          <li>
            Использовать <strong>Docker</strong> для развертывания всех сервисов:{' '}
            <strong>PostgreSQL</strong>, <strong>Redis</strong>, <strong>MinIO</strong>.
          </li>
          <li>
            Написать <strong>Docker Compose</strong> для удобного запуска всех сервисов.
          </li>
        </ul>
      </>
    </Layout>
  );
};

export default JsCloudStoragePage;
