import { Layout } from '@/layout/Layout';

const JsImageProcessing = () => {
  return (
    <Layout>
      <>
        <h1>Проект: Обработчик изображений на Node.js</h1>

        <h2>Мотивация проекта</h2>
        <ul>
          <li>Создание микросервисного приложения для асинхронной обработки изображений.</li>
          <li>
            Использование <strong>Node.js</strong> и <strong>Express.js</strong> для создания
            высокопроизводительного API.
          </li>
          <li>
            Интеграция с <strong>Kafka</strong> для асинхронной обработки задач.
          </li>
          <li>Изучение принципов микросервисной архитектуры и работы с очередями сообщений.</li>
          <li>
            Использование <strong>Docker</strong> и <strong>Docker Compose</strong> для
            контейнеризации сервисов.
          </li>
        </ul>

        <h2>Общее описание</h2>
        <p>
          Обработчик изображений — это микросервисное приложение, позволяющее загружать,
          обрабатывать и сохранять изображения. Пользователь загружает изображение через API, оно
          попадает в очередь Kafka, где его обрабатывают воркеры. Обработка включает сжатие или
          изменение формата изображения, после чего оно сохраняется в хранилище, а пользователю
          отправляется ссылка для скачивания обработанного изображения.
        </p>

        <h3>Основные функции:</h3>
        <ol>
          <li>
            <strong>Загрузка изображений</strong>
            <ul>
              <li>Пользователи могут загружать изображения через REST API.</li>
              <li>Изображение отправляется в очередь Kafka для дальнейшей обработки.</li>
            </ul>
          </li>
          <li>
            <strong>Обработка изображений</strong>
            <ul>
              <li>Асинхронная обработка изображений с использованием воркеров.</li>
              <li>Каждое задание на обработку передается через Kafka и выполняется в фоне.</li>
            </ul>
          </li>
          <li>
            <strong>Хранилище изображений</strong>
            <ul>
              <li>Обработанные изображения сохраняются в облачное хранилище (например, S3).</li>
              <li>Пользователь получает ссылку для скачивания обработанного изображения.</li>
            </ul>
          </li>
          <li>
            <strong>Мониторинг состояния задач</strong>
            <ul>
              <li>
                Возможность отслеживать статус обработки изображения (в очереди, в обработке,
                завершено).
              </li>
            </ul>
          </li>
        </ol>

        <h2>Цели проекта</h2>
        <ul>
          <li>Создать масштабируемую систему для обработки большого количества изображений.</li>
          <li>Обеспечить асинхронную обработку задач с помощью Kafka.</li>
          <li>Изучить интеграцию Node.js с микросервисной архитектурой и контейнеризацией.</li>
        </ul>

        <h2>Функционал приложения</h2>
        <h3>Работа с изображениями</h3>
        <ul>
          <li>
            <strong>Загрузка изображений</strong> — через REST API, отправка задачи на обработку в
            очередь Kafka.
          </li>
          <li>
            <strong>Обработка изображений</strong> — асинхронная обработка изображений воркерами.
          </li>
          <li>
            <strong>Сохранение изображений</strong> — обработанные изображения сохраняются в
            облачное хранилище.
          </li>
          <li>
            <strong>Статус обработки</strong> — проверка статуса обработки задачи по ID.
          </li>
        </ul>

        <h2>API Сервис</h2>
        <ul>
          <li>
            <strong>POST /upload</strong> — загрузка изображения и отправка задачи в очередь Kafka.
          </li>
          <li>
            <strong>GET /status/&#123;id&#125;</strong> — получение статуса обработки изображения.
          </li>
          <li>
            <strong>GET /download/&#123;id&#125;</strong> — получение ссылки для скачивания
            обработанного изображения.
          </li>
        </ul>

        <h2>Kafka</h2>
        <ul>
          <li>
            <strong>Тема для задач обработки</strong> — очередь в Kafka, куда отправляются задачи на
            обработку изображений.
          </li>
          <li>
            <strong>Консумеры</strong> — воркеры, которые прослушивают очередь и обрабатывают
            изображения.
          </li>
        </ul>

        <h2>Сервисы</h2>
        <h3>Основной сервис (Node.js)</h3>
        <ul>
          <li>Реализация REST API для загрузки изображений и получения их статусов.</li>
          <li>Интеграция с Kafka для асинхронной обработки задач.</li>
          <li>Взаимодействие с облачным хранилищем для сохранения обработанных изображений.</li>
        </ul>

        <h3>Kafka</h3>
        <ul>
          <li>
            <strong>Продюсеры</strong> — отправляют задачи на обработку изображений в очередь Kafka.
          </li>
          <li>
            <strong>Консумеры</strong> — воркеры, которые асинхронно обрабатывают изображения и
            отправляют результаты обратно.
          </li>
        </ul>

        <h2>Хранилище изображений</h2>
        <ul>
          <li>
            Облачное хранилище S3 или Minio для сохранения оригиналов и обработанных изображений.
          </li>
          <li>Возможность получения ссылки для скачивания обработанного изображения.</li>
        </ul>

        <h2>Компоненты системы</h2>
        <ul>
          <li>
            <strong>API-сервис (Node.js)</strong> — обработка пользовательских запросов.
          </li>
          <li>
            <strong>Kafka</strong> — асинхронная обработка задач.
          </li>
          <li>
            <strong>Воркеры</strong> — выполнение задач по обработке изображений.
          </li>
          <li>
            <strong>Хранилище</strong> — для сохранения обработанных изображений.
          </li>
        </ul>

        <h2>Docker и контейнеризация</h2>
        <ul>
          <li>
            <strong>Docker</strong> — контейнеризация всех компонентов системы.
          </li>
          <li>
            <strong>Docker Compose</strong> — оркестрация контейнеров (Node.js, Kafka, воркеры).
          </li>
        </ul>

        <h2>План работы</h2>
        <ol>
          <li>
            <strong>Настройка Kafka</strong> — интеграция Kafka с Node.js для обработки задач.
          </li>
          <li>
            <strong>Реализация API</strong> — создание маршрутов для загрузки изображений и
            проверки их статусов.
          </li>
          <li>
            <strong>Воркеры</strong> — разработка асинхронных воркеров для обработки изображений.
          </li>
          <li>
            <strong>Хранилище</strong> — интеграция с облачным хранилищем для сохранения
            обработанных изображений.
          </li>
          <li>
            <strong>Тестирование</strong> — проверка производительности и корректности обработки.
          </li>
          <li>
            <strong>Деплой</strong> — развёртывание системы с использованием Docker и Docker Compose.
          </li>
        </ol>
      </>
    </Layout>
  );
};

export default JsImageProcessing;
