import { Layout } from '@/layout/Layout';

const JsTodoPage = () => {
  return (
    <Layout>
      <>
        <h1 id="-">Проект “Планировщик задач”</h1>
        <p>
          Многопользовательский планировщик задач, который пользователи могут использовать как
          TODO-лист. Проект вдохновлён такими решениями, как Trello, и направлен на управление
          задачами и досками с поддержкой уведомлений через Telegram.
        </p>
        <h2 id="-">Мотивация проекта</h2>
        <ul>
          <li>
            Практическое знакомство с микросервисной архитектурой — разработка проекта, разделённого
            на несколько сервисов.
          </li>
          <li>Изучение и применение асинхронных процессов для повышения производительности.</li>
          <li>Практика использования контейнеризации с помощью Docker и Docker Compose.</li>
          <li>Создание и интеграция схемы REST API.</li>
        </ul>
        <h2 id="-">Функционал приложения</h2>
        <h3 id="-">Работа с пользователями</h3>
        <ul>
          <li>
            <strong>Регистрация</strong> — возможность зарегистрировать нового пользователя.
          </li>
          <li>
            <strong>Авторизация</strong> — вход в систему с использованием учётных данных.
          </li>
          <li>
            <strong>Выход</strong> — завершение сессии пользователя.
          </li>
        </ul>
        <h3 id="-">Работа с досками</h3>
        <ul>
          <li>
            <strong>Создание доски</strong> — создание новых досок для группировки задач.
          </li>
          <li>
            <strong>Удаление доски</strong> — каскадное удаление доски вместе с задачами.
          </li>
          <li>
            <strong>Редактирование доски</strong> — изменение названия и других параметров доски.
          </li>
        </ul>
        <h3 id="-">Работа с задачами</h3>
        <ul>
          <li>
            <strong>Создание задачи</strong> — добавление новой задачи с заголовком и описанием.
          </li>
          <li>
            <strong>Редактирование задачи</strong> — изменение заголовка, описания и других свойств
            задачи.
          </li>
          <li>
            <strong>Изменение статуса задачи</strong> — изменение текущего статуса задачи (например,
            &quot;ожидание&quot;, &quot;в процессе&quot;, &quot;завершена&quot;).
          </li>
          <li>
            <strong>Пометка задачи как выполненной</strong> — завершение задачи.
          </li>
          <li>
            <strong>Удаление задачи</strong> — удаление задачи из доски.
          </li>
        </ul>
        <h3 id="-">Работа со статусами</h3>
        <ul>
          <li>
            <strong>Создание статуса</strong> — создание настраиваемых статусов для задач.
          </li>
          <li>
            <strong>Удаление статуса</strong> — удаление статусов, которые больше не используются.
          </li>
        </ul>
        <h3 id="-telegram">Оповещения пользователей через Telegram</h3>
        <ul>
          <li>
            <strong>Приветственное сообщение</strong> — отправляется при активации пользователем
            Telegram-бота.
          </li>
          <li>
            <strong>Ежедневные уведомления</strong> — каждую ночь в полночь отправляется сообщение с
            информацией о выполненных задачах за прошедшие сутки, о количестве оставшихся
            невыполненных задач и о задачах, которых изменился за день.
          </li>
        </ul>
        <h2 id="-">Интерфейс приложения</h2>
        <p>
          Веб-приложение (SSR) с использованием TypeScript для общения с сервером. Фронтенд на базе
          фреймворка <strong>Next.js</strong>.
        </p>
        <h3 id="-">Шапка</h3>
        <ul>
          <li>
            <strong>Неавторизованные пользователи</strong>: отображаются кнопки для регистрации и
            авторизации.
          </li>
          <li>
            <strong>Авторизация</strong>: форма с полями для ввода логина и пароля.
          </li>
          <li>
            <strong>Регистрация</strong>: форма с полями логин, пароль и повтор пароля.
          </li>
          <li>
            <strong>Авторизованные пользователи</strong>: отображается логин текущего пользователя и
            кнопка для выхода (Logout).
          </li>
        </ul>
        <h3 id="-">Контент (доступен только для авторизованных пользователей)</h3>
        <ul>
          <li>
            <strong>Создание задач</strong>: поле для ввода заголовка новой задачи и кнопка
            «Добавить».
          </li>
          <li>
            <strong>Список невыполненных задач</strong>: задачи, которые ещё не завершены.
          </li>
          <li>
            <strong>Список выполненных задач</strong>: задачи, помеченные как завершённые.
          </li>
        </ul>
        <h2 id="sql-">SQL база данных</h2>
        <p>Структура базы данных спроектирована с учётом следующих отношений:</p>
        <ul>
          <li>
            <strong>Пользователи и задачи</strong>: один ко многим (один пользователь может иметь
            много задач).
          </li>
          <li>
            <strong>Задачи и доски</strong>: один ко многим (одна доска может содержать много
            задач).
          </li>
          <li>
            <strong>Доски и пользователи</strong>: многие ко многим (несколько пользователей могут
            работать с одной доской).
          </li>
          <li>
            <strong>Статусы и задачи</strong>: один ко многим (один статус может быть назначен
            многим задачам).
          </li>
        </ul>
        <p>
          Таблица <strong>Tasks</strong> включает следующие поля:
        </p>
        <ul>
          <li>
            <strong>Заголовок задачи</strong>.
          </li>
          <li>
            <strong>Описание задачи</strong>.
          </li>
          <li>
            <strong>Владелец</strong> (пользователь).
          </li>
          <li>
            <strong>Статус</strong> (например, «в процессе» или «завершено»).
          </li>
          <li>
            <strong>Время завершения задачи</strong> (timestamp), когда задача была помечена как
            сделанная.
          </li>
          <li>
            <strong>Время обновления задачи</strong> (timestamp), когда было последнее обновление
            задачи.
          </li>
        </ul>
        <h2 id="jwt">JWT</h2>
        <p>
          Для авторизации используются <strong>Access token</strong> и{' '}
          <strong>Refresh token</strong>.
        </p>
        <ul>
          <li>
            <strong>Access token</strong>: срок действия 10-15 минут.
          </li>
          <li>
            <strong>Refresh token</strong>: срок действия до 2 месяцев.
          </li>
          <li>
            <strong>Привязка Refresh token</strong> к пользователю: хранится в базе данных как
            внешний ключ.
          </li>
        </ul>
        <h2 id="-">Сервисы</h2>
        <h3 id="-">Бэкенд</h3>
        <p>
          Приложение на <strong>Js</strong>, реализующее REST API для управления пользователями,
          досками и задачами.
        </p>
        <ul>
          <li>
            <strong>POST /user/registration</strong> — регистрация нового пользователя.
          </li>
          <li>
            <strong>POST /user/login</strong> — авторизация пользователя.
          </li>
          <li>
            <strong>GET /user</strong> — получение текущего авторизованного пользователя.
          </li>
          <li>
            <p>
              <strong>DELETE /user/logout</strong> — выход из системы.
            </p>
          </li>
          <li>
            <p>
              <strong>GET /boards</strong> — получение всех досок текущего пользователя.
            </p>
          </li>
          <li>
            <strong>GET /boards/&#123;id&#125;</strong> — получение конкретной доски по
            идентификатору.
          </li>
          <li>
            <strong>POST /boards</strong> — создание новой доски.
          </li>
          <li>
            <strong>PUT /boards/&#123;id&#125;</strong> — редактирование доски.
          </li>
          <li>
            <p>
              <strong>DELETE /boards/&#123;id&#125;</strong> — удаление доски с каскадным удалением
              задач.
            </p>
          </li>
          <li>
            <p>
              <strong>GET /tasks</strong> — получение всех задач текущего пользователя.
            </p>
          </li>
          <li>
            <strong>GET /tasks/&#123;id&#125;</strong> — получение конкретной задачи по
            идентификатору.
          </li>
          <li>
            <strong>POST /tasks</strong> — создание новой задачи.
          </li>
          <li>
            <strong>PUT /tasks/&#123;id&#125;</strong> — редактирование задачи.
          </li>
          <li>
            <p>
              <strong>DELETE /tasks/&#123;id&#125;</strong> — удаление задачи.
            </p>
          </li>
          <li>
            <p>
              <strong>POST /status</strong> — создание нового статуса для задач.
            </p>
          </li>
          <li>
            <strong>DELETE /status</strong> — удаление существующего статуса.
          </li>
        </ul>
        <h3 id="-">Фронтенд</h3>
        <ul>
          <li>
            <strong>HTML</strong>, <strong>CSS</strong>.
          </li>
          <li>
            <strong>JavaScript</strong>, <strong>TypeScript</strong>.
          </li>
          <li>
            <strong>Next.js</strong> (React) для реализации одностраничного приложения.
          </li>
        </ul>
        <h3 id="telegram-api">Telegram API</h3>
        <p>Используется для отправки уведомлений пользователю через Telegram-бота.</p>
        <h2 id="docker">Docker</h2>
        <p>
          Проект использует <strong>Docker</strong> для контейнеризации сервисов и их развертывания.
        </p>
        <h3 id="-">Контейнеры:</h3>
        <ul>
          <li>
            <strong>Telegram bot</strong> - Js приложение.
          </li>
          <li>
            <strong>Backend</strong> — Js приложение.
          </li>
          <li>
            <strong>Frontend</strong> — Next.js приложение.
          </li>
          <li>
            <strong>PostgreSQL</strong> — база данных.
          </li>
        </ul>
        <h2 id="-">Деплой</h2>
        <p>
          Проект деплоится на удалённый сервер с использованием Docker Compose для оркестрации
          контейнеров.
        </p>
        <h2 id="-">План работы над проектом</h2>
        <ol>
          <li>
            <strong>Backend</strong> — написание Docker и Docker Compose файлов для запуска
            приложения и базы данных.
          </li>
          <li>
            <strong>SQL-сущности</strong> — описание и миграции для базы данных.
          </li>
          <li>
            <strong>Backend</strong> — регистрация, авторизация, logout пользователей.
          </li>
          <li>
            <strong>Backend</strong> — интеграция JWT для авторизации.
          </li>
          <li>
            <strong>Backend</strong> — реализация CRUD для досок.
          </li>
          <li>
            <strong>Backend</strong> — реализация CRUD для задач.
          </li>
          <li>
            <strong>Telegram-бот</strong> — настройка крон-задач для отправки уведомлений о статусе
            задач.
          </li>
          <li>
            <strong>Frontend</strong> — разработка страницы регистрации и авторизации.
          </li>
          <li>
            <strong>Frontend</strong> — разработка страницы управления досками пользователя.
          </li>
          <li>
            <strong>Frontend</strong> — отображение задач в стиле kanban.
          </li>
          <li>
            <strong>Деплой</strong> — развертывание приложения на VPS.
          </li>
        </ol>
      </>
    </Layout>
  );
};

export default JsTodoPage;
