import { Layout } from '@/layout/Layout';

const GoImageProcessing = () => {
  return (
    <Layout>
      <>
        <h1>Проект: Обработчик изображений</h1>

        <h2>Мотивация проекта</h2>
        <ul>
          <li>Разработка микросервисного приложения для асинхронной обработки изображений.</li>
          <li>
            Использование <strong>Go</strong> для создания высокопроизводительного и
            отказоустойчивого сервиса.
          </li>
          <li>
            Интеграция с <strong>Kafka</strong> для обеспечения асинхронной обработки изображений.
          </li>
          <li>Изучение принципов микросервисной архитектуры и распределенных систем.</li>
          <li>
            Работа с <strong>Docker</strong> и <strong>Docker Compose</strong> для контейнеризации
            сервисов.
          </li>
        </ul>

        <h2>Общее описание</h2>
        <p>
          Обработчик изображений — это микросервисное приложение, позволяющее загружать,
          обрабатывать и сохранять изображения. Пользователь загружает изображение, оно попадает в
          очередь Kafka, где его обрабатывают воркеры на Go. Обработка включает сжатие изображения,
          после чего оно сохраняется в хранилище, а пользователю отправляется уведомление о
          завершении задачи.
        </p>

        <h3>Основные функции:</h3>
        <ol>
          <li>
            <strong>Загрузка изображений</strong>
            <ul>
              <li>Пользователи могут загружать изображения через REST API.</li>
              <li>Изображение отправляется в очередь Kafka для дальнейшей обработки.</li>
            </ul>
          </li>
          <li>
            <strong>Обработка изображений</strong>
            <ul>
              <li>Воркеры на Go асинхронно сжимают изображение.</li>
              <li>Каждое задание на обработку передается через Kafka и выполняется в фоне.</li>
            </ul>
          </li>
          <li>
            <strong>Хранилище изображений</strong>
            <ul>
              <li>После обработки изображения сохраняются в облачном хранилище - S3.</li>
              <li>Пользователь получает URL для скачивания обработанного изображения.</li>
            </ul>
          </li>
          <li>
            <strong>Мониторинг состояния задач</strong>
            <ul>
              <li>
                Возможность отслеживать статус обработки изображения (в очереди, в обработке,
                завершено).
              </li>
            </ul>
          </li>
        </ol>

        <h2>Цели проекта</h2>
        <ul>
          <li>
            Создать высокопроизводительную систему для обработки большого количества изображений в
            режиме реального времени.
          </li>
          <li>Обеспечить масштабируемость системы через распределенные системы с Kafka.</li>
          <li>Изучить работу с микросервисами и контейнеризацию с Docker.</li>
        </ul>

        <h2>Функционал приложения</h2>
        <h3>Работа с изображениями</h3>
        <ul>
          <li>
            <strong>Загрузка изображений</strong> — через REST API, отправка в Kafka для последующей
            обработки.
          </li>
          <li>
            <strong>Обработка изображений</strong> — асинхронная обработка изображений через
            воркеры, включая сжатие и конвертацию форматов.
          </li>
          <li>
            <strong>Сохранение изображений</strong> — обработанные изображения сохраняются в
            хранилище.
          </li>
          <li>
            <strong>Статус обработки</strong> — получение статуса задачи по идентификатору.
          </li>
        </ul>

        <h2>API Сервис</h2>
        <ul>
          <li>
            <strong>POST /upload</strong> — загрузка изображения, отправка задачи в очередь Kafka.
          </li>
          <li>
            <strong>GET /status/&#123;id&#125;</strong> — получение статуса обработки изображения.
          </li>
          <li>
            <strong>GET /download/&#123;id&#125;</strong> — получение URL для скачивания
            обработанного изображения.
          </li>
        </ul>

        <h2>Kafka</h2>
        <ul>
          <li>
            <strong>Тема для задач обработки</strong> — создание темы в Kafka, куда отправляются
            задачи на обработку изображений.
          </li>
          <li>
            <strong>Консумеры</strong> — воркеры на Go, которые прослушивают очередь и обрабатывают
            изображения.
          </li>
        </ul>

        <h2>Сервисы</h2>
        <h3>Основной сервис (Go)</h3>
        <ul>
          <li>Реализация REST API для загрузки изображений и получения их статусов.</li>
          <li>
            Интеграция с Kafka для отправки и получения сообщений о задачах обработки изображений.
          </li>
          <li>Асинхронная обработка изображений.</li>
          <li>
            (Опционально) Интеграция с Prometheus и Grafana для мониторинга производительности.
          </li>
        </ul>

        <h3>Kafka</h3>
        <ul>
          <li>
            <strong>Продюсеры</strong> — отправляют задачи на обработку изображений в очередь Kafka.
          </li>
          <li>
            <strong>Консумеры</strong> — воркеры на Go, которые асинхронно обрабатывают изображения.
          </li>
        </ul>

        <h2>Хранилище изображений</h2>
        <ul>
          <li>
            Облачное хранилище S3 - Minio для сохранения оригиналов и обработанных изображений.
          </li>
          <li>Возможность получения ссылки для скачивания результата обработки.</li>
        </ul>

        <h2>Компоненты системы</h2>
        <ul>
          <li>
            <strong>API-сервис (Go)</strong> — взаимодействие с пользователями.
          </li>
          <li>
            <strong>Kafka</strong> — асинхронная обработка задач.
          </li>
          <li>
            <strong>Воркеры (Go)</strong> — выполнение задач по обработке изображений.
          </li>
          <li>
            <strong>Хранилище</strong> — для сохранения обработанных изображений.
          </li>
        </ul>

        <h2>Docker и контейнеризация</h2>
        <ul>
          <li>
            <strong>Docker</strong> — контейнеризация сервисов.
          </li>
          <li>
            <strong>Docker Compose</strong> — организация взаимодействия между сервисами (Go, Kafka,
            воркеры).
          </li>
        </ul>

        <h2>План работы</h2>
        <ol>
          <li>
            <strong>Настройка Kafka</strong> — интеграция Kafka с Go для отправки/приема сообщений.
          </li>
          <li>
            <strong>Реализация API</strong> — создание эндпоинтов для загрузки изображений и
            получения статусов.
          </li>
          <li>
            <strong>Воркеры</strong> — разработка воркеров на Go для обработки изображений.
          </li>
          <li>
            <strong>Хранилище</strong> — интеграция с файловой системой или облачным хранилищем.
          </li>
          <li>
            <strong>Тестирование</strong> — тестирование производительности системы и корректности
            обработки.
          </li>
          <li>
            <strong>Деплой</strong> — развертывание системы с помощью Docker и Docker Compose.
          </li>
        </ol>
      </>
    </Layout>
  );
};

export default GoImageProcessing;
