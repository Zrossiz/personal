import { Layout } from '@/layout/Layout';

const GoWebServerPage = () => {
  return (
    <Layout>
      <>
        <h1 >Веб-сервер для управления заметками</h1>
        <h2 >Мотивация проекта</h2>
        <p>
          Этот проект предназначен для начинающих разработчиков, чтобы изучить основы работы с
          веб-серверами, роутингом и CRUD-операциями на Go с использованием стандартной библиотеки.
          Проект поможет освоить работу с HTTP-запросами, обработку данных в формате JSON и
          управление данными в памяти или в файлах.
        </p>
        <h2>Функционал приложения и API-эндпоинты</h2>
        <p>
          Приложение представляет собой веб-сервер, который предоставляет API для управления
          заметками (notes). Заметки содержат заголовок и текст.
        </p>
        <h3 id="-api-">Основные API-эндпоинты:</h3>
        <ul>
          <li>
            <code>GET /notes</code> — Возвращает список всех заметок.
          </li>
          <li>
            <code>POST /notes</code> — Создаёт новую заметку. Данные отправляются в теле запроса в
            формате JSON.
          </li>
          <li>
            <code>GET /notes/&#123;id&#125;</code> — Возвращает заметку по её идентификатору.
          </li>
          <li>
            <code>PUT /notes/&#123;id&#125;</code> — Обновляет заметку с указанным идентификатором. Данные
            отправляются в формате JSON.
          </li>
          <li>
            <code>DELETE /notes/&#123;id&#125;</code> — Удаляет заметку по идентификатору.
          </li>
        </ul>
        <h2 id="-">План работы над приложением</h2>
        <h3 id="1-">1. Создание структуры проекта</h3>
        <ul>
          <li>
            Инициализировать проект с помощью Go (<code>go mod init</code>).
          </li>
          <li>
            Создать файл <code>main.go</code> для основной логики веб-сервера.
          </li>
          <li>Настроить маршруты (роуты) для обработки запросов: GET, POST, PUT, DELETE.</li>
        </ul>
        <h3 id="2-">2. Модель данных</h3>
        <ul>
          <li>
            Создать структуру заметки <code>Note</code>, которая будет содержать поля:
            <ul>
              <li>
                <code>ID</code> (уникальный идентификатор).
              </li>
              <li>
                <code>Title</code> (заголовок заметки).
              </li>
              <li>
                <code>Content</code> (содержимое заметки).
              </li>
            </ul>
          </li>
          <li>Заметки будут храниться в памяти (слайс или карта).</li>
        </ul>
        <h3 id="3-api-">3. Реализация API-эндпоинтов</h3>
        <h4 id="-get-notes-">
          <code>GET /notes</code>
        </h4>
        <ul>
          <li>Реализовать обработку запроса для получения списка всех заметок.</li>
          <li>Возвращать данные в формате JSON.</li>
        </ul>
        <h4 id="-post-notes-">
          <code>POST /notes</code>
        </h4>
        <ul>
          <li>Реализовать добавление новой заметки.</li>
          <li>Проверять валидность данных (заголовок не должен быть пустым).</li>
          <li>Присваивать уникальный идентификатор каждой новой заметке.</li>
        </ul>
        <h4 id="-get-notes-id-">
          <code>GET /notes/&#123;id&#125;</code>
        </h4>
        <ul>
          <li>Реализовать получение заметки по её идентификатору.</li>
          <li>Если заметка не найдена — возвращать ошибку 404.</li>
        </ul>
        <h4 id="-put-notes-id-">
          <code>PUT /notes/&#123;id&#125;</code>
        </h4>
        <ul>
          <li>Реализовать обновление заметки.</li>
          <li>Если заметка не найдена — возвращать ошибку 404.</li>
        </ul>
        <h4 id="-delete-notes-id-">
          <code>DELETE /notes/&#123;id&#125;</code>
        </h4>
        <ul>
          <li>Реализовать удаление заметки по идентификатору.</li>
          <li>Если заметка не найдена — возвращать ошибку 404.</li>
        </ul>
        <h3 id="4-">4. Работа с данными</h3>
        <ul>
          <li>Сначала реализовать хранение данных в памяти в виде карты или слайса.</li>
          <li>Дополнительно можно реализовать сохранение данных в файл (например, JSON).</li>
        </ul>
        <h3 id="5-">5. Обработка ошибок и валидация</h3>
        <ul>
          <li>
            Реализовать обработку ошибок при работе с данными: невалидные запросы (например,
            отсутствие полей), отсутствие заметок по указанному ID.
          </li>
          <li>
            Возвращать соответствующие HTTP-коды (например, 400 при некорректных данных и 404 при
            отсутствии данных).
          </li>
        </ul>
        <h3 id="6-">6. Тестирование приложения</h3>
        <ul>
          <li>
            Написать несколько тестов для проверки работы API (например, с использованием{' '}
            <code>curl</code> или Postman).
          </li>
          <li>
            Убедиться, что все CRUD-операции выполняются корректно и данные правильно
            обрабатываются.
          </li>
        </ul>
        <h2 id="-">Чеклист для самопроверки</h2>
        <h3 id="-">Функциональные проблемы:</h3>
        <ul>
          <li>Все эндпоинты должны корректно обрабатывать HTTP-запросы.</li>
          <li>Добавление новой заметки должно проверять наличие всех необходимых полей.</li>
          <li>Обновление заметки должно проверять существование заметки с данным ID.</li>
          <li>
            Обработка ошибок: возвращение 404 для несуществующих заметок, 400 для некорректных
            данных.
          </li>
        </ul>
        <h3 id="-">Возможные улучшения:</h3>
        <ul>
          <li>Реализовать поддержку хранения данных в JSON-файле.</li>
          <li>Добавить аутентификацию для защиты доступа к API.</li>
          <li>Реализовать пагинацию для списка заметок (в случае большого объёма данных).</li>
          <li>
            Реализовать ограничение по количеству заметок для каждого пользователя (если добавлять
            аутентификацию).
          </li>
        </ul>
        <h2 id="-">Технологии</h2>
        <ul>
          <li>
            <strong>Язык программирования</strong>: Go.
          </li>
          <li>
            <strong>Стандартная библиотека</strong>:
            <ul>
              <li>
                <code>net/http</code> для работы с HTTP-запросами.
              </li>
              <li>
                <code>encoding/json</code> для работы с данными в формате JSON.
              </li>
            </ul>
          </li>
        </ul>
      </>
    </Layout>
  );
};

export default GoWebServerPage;
